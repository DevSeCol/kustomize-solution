# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GKE

#on:
#  release:
#    types: [created]

on:
  push:
    branches:
    - master
  pull_request:

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.PROJECT_ID }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: australia-southeast1
  GKE_CLUSTER: devsecol-cluster
  GKE_PREFIX: ricardo
  IMAGE: ricardo-gke
  DEPLOYMENT_NAME: nginx-deployment
  REGISTRY_HOSTNAME: asia.gcr.io

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./src

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.TF_SERVICE_ACCOUNT_EMAIL }}
        service_account_key: ${{ secrets.TF_SERVICE_ACCOUNT }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker
      
    # Build the Docker image
    - name: Build
      run: |        
        docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE"-development:"$GITHUB_SHA" \
          --build-arg ENVIRONMENT="Development" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .
        docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE"-testing:"$GITHUB_SHA" \
          --build-arg ENVIRONMENT="Testing" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE-development:$GITHUB_SHA
        docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE-testing:$GITHUB_SHA

    # Deploy the Docker image to the GKE cluster
    #- name: Deploy
    #  run: |
    #    gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
    #    kubens $GKE_NAMESPACE
    #    kubectl apply -f deployment.yaml
    #    echo DEBUG: kubectl set image deployment/test-deploy nginx-container=$REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${GITHUB_SHA}
    #    kubectl set image deployment/test-deploy nginx-container=$REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${GITHUB_SHA}
    #    kubectl get pods
    #    #kubectl rollout status deployment/$DEPLOYMENT_NAME
    #    #kubectl get services -o wide
        
    # Set up kustomize binary to be able to use the "kustomize edit" command to change the image
    - name: Install Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash

    # Change the image with the one created during the current job
    - name: Update development container image
      run: |
        pwd
        ls
        cat kustomization.yaml
        ../../kustomize edit set image nginx=$REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE-development:${GITHUB_SHA}
        cat kustomization.yaml
      working-directory: ./src/overlays/development

    # Change the image with the one created during the current job
    - name: Update testing container image
      run: |
        ../../kustomize edit set image nginx=$REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE-testing:${GITHUB_SHA}
        cat kustomization.yaml
      working-directory: ./src/overlays/testing

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
        kubectl kustomize overlays/development | tee development.yaml
        kubectl apply -k overlays/development
        kubectl kustomize overlays/testing | tee testing.yaml
        kubectl apply -k overlays/testing

        echo "================"
        echo "Differences between environments:"
        diff development.yaml testing.yaml || echo "There are differences between Development and Testing"

        echo "================"
        echo "Deployment and services status in the Development environment:"
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n $GKE_PREFIX-development
        kubectl get services -o wide -n $GKE_PREFIX-development

        echo "================"
        echo "Deployment and services status in the Testing environment:"
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n $GKE_PREFIX-testing
        kubectl get services -o wide -n $GKE_PREFIX-testing